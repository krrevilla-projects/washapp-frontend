/* tslint:disable */
/* eslint-disable */
/**
 * Laundry Service - API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AddressDto
 */
export interface AddressDto {
    /**
     * 
     * @type {string}
     * @memberof AddressDto
     */
    'address': string;
}
/**
 * 
 * @export
 * @interface AddressResponse
 */
export interface AddressResponse {
    /**
     * 
     * @type {number}
     * @memberof AddressResponse
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof AddressResponse
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof AddressResponse
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof AddressResponse
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface AuthResponse
 */
export interface AuthResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthResponse
     */
    'access_token': string;
}
/**
 * 
 * @export
 * @interface JobItemsDto
 */
export interface JobItemsDto {
    /**
     * 
     * @type {number}
     * @memberof JobItemsDto
     */
    'jobId': number;
    /**
     * 
     * @type {number}
     * @memberof JobItemsDto
     */
    'itemId': number;
    /**
     * 
     * @type {number}
     * @memberof JobItemsDto
     */
    'quantity': number;
}
/**
 * 
 * @export
 * @interface JobItemsResponse
 */
export interface JobItemsResponse {
    /**
     * 
     * @type {number}
     * @memberof JobItemsResponse
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof JobItemsResponse
     */
    'jobId': number;
    /**
     * 
     * @type {number}
     * @memberof JobItemsResponse
     */
    'itemId': number;
    /**
     * 
     * @type {JobItemsResponseItem}
     * @memberof JobItemsResponse
     */
    'item': JobItemsResponseItem;
    /**
     * 
     * @type {number}
     * @memberof JobItemsResponse
     */
    'quantity': number;
    /**
     * 
     * @type {string}
     * @memberof JobItemsResponse
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof JobItemsResponse
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface JobItemsResponseItem
 */
export interface JobItemsResponseItem {
    /**
     * 
     * @type {number}
     * @memberof JobItemsResponseItem
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof JobItemsResponseItem
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof JobItemsResponseItem
     */
    'price': number;
    /**
     * 
     * @type {string}
     * @memberof JobItemsResponseItem
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof JobItemsResponseItem
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface LaundryJobDto
 */
export interface LaundryJobDto {
    /**
     * 
     * @type {string}
     * @memberof LaundryJobDto
     */
    'userId'?: string;
    /**
     * 
     * @type {LaundryJobStatus}
     * @memberof LaundryJobDto
     */
    'status'?: LaundryJobStatus;
}


/**
 * 
 * @export
 * @interface LaundryJobResponse
 */
export interface LaundryJobResponse {
    /**
     * 
     * @type {number}
     * @memberof LaundryJobResponse
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof LaundryJobResponse
     */
    'userId': number;
    /**
     * 
     * @type {string}
     * @memberof LaundryJobResponse
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof LaundryJobResponse
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof LaundryJobResponse
     */
    'updatedAt': string;
    /**
     * 
     * @type {Array<JobItemsResponse>}
     * @memberof LaundryJobResponse
     */
    'items': Array<JobItemsResponse>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const LaundryJobStatus = {
    Pending: 'pending',
    Cancelled: 'cancelled',
    InProgress: 'in progress',
    Paid: 'paid',
    Finished: 'finished'
} as const;

export type LaundryJobStatus = typeof LaundryJobStatus[keyof typeof LaundryJobStatus];


/**
 * 
 * @export
 * @interface LoginUserDto
 */
export interface LoginUserDto {
    /**
     * 
     * @type {string}
     * @memberof LoginUserDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginUserDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface MenuDto
 */
export interface MenuDto {
    /**
     * 
     * @type {string}
     * @memberof MenuDto
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof MenuDto
     */
    'price': number;
}
/**
 * 
 * @export
 * @interface MenuResponse
 */
export interface MenuResponse {
    /**
     * 
     * @type {number}
     * @memberof MenuResponse
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof MenuResponse
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof MenuResponse
     */
    'price': number;
    /**
     * 
     * @type {string}
     * @memberof MenuResponse
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof MenuResponse
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface RegisterDto
 */
export interface RegisterDto {
    /**
     * 
     * @type {string}
     * @memberof RegisterDto
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterDto
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterDto
     */
    'contact': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterDto
     */
    'confirmPassword': string;
}
/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * 
     * @type {number}
     * @memberof UserResponse
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'contact': string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'email': string;
    /**
     * 
     * @type {boolean}
     * @memberof UserResponse
     */
    'isVerified': boolean;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'userType'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'updatedAt': string;
}

/**
 * AddressApi - axios parameter creator
 * @export
 */
export const AddressApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AddressDto} addressDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressControllerCreateOne: async (addressDto: AddressDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addressDto' is not null or undefined
            assertParamExists('addressControllerCreateOne', 'addressDto', addressDto)
            const localVarPath = `/address`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addressDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {any} id Deletes address based on id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressControllerDeleteOne: async (id: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addressControllerDeleteOne', 'id', id)
            const localVarPath = `/address/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressControllerFindByUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/address`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {any} id Updates address based on id
         * @param {AddressDto} addressDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressControllerUpdateOne: async (id: any, addressDto: AddressDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addressControllerUpdateOne', 'id', id)
            // verify required parameter 'addressDto' is not null or undefined
            assertParamExists('addressControllerUpdateOne', 'addressDto', addressDto)
            const localVarPath = `/address/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addressDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AddressApi - functional programming interface
 * @export
 */
export const AddressApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AddressApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AddressDto} addressDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addressControllerCreateOne(addressDto: AddressDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddressResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addressControllerCreateOne(addressDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {any} id Deletes address based on id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addressControllerDeleteOne(id: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addressControllerDeleteOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addressControllerFindByUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AddressResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addressControllerFindByUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {any} id Updates address based on id
         * @param {AddressDto} addressDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addressControllerUpdateOne(id: any, addressDto: AddressDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddressResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addressControllerUpdateOne(id, addressDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AddressApi - factory interface
 * @export
 */
export const AddressApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AddressApiFp(configuration)
    return {
        /**
         * 
         * @param {AddressDto} addressDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressControllerCreateOne(addressDto: AddressDto, options?: any): AxiosPromise<AddressResponse> {
            return localVarFp.addressControllerCreateOne(addressDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {any} id Deletes address based on id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressControllerDeleteOne(id: any, options?: any): AxiosPromise<void> {
            return localVarFp.addressControllerDeleteOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressControllerFindByUser(options?: any): AxiosPromise<Array<AddressResponse>> {
            return localVarFp.addressControllerFindByUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {any} id Updates address based on id
         * @param {AddressDto} addressDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressControllerUpdateOne(id: any, addressDto: AddressDto, options?: any): AxiosPromise<AddressResponse> {
            return localVarFp.addressControllerUpdateOne(id, addressDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AddressApi - object-oriented interface
 * @export
 * @class AddressApi
 * @extends {BaseAPI}
 */
export class AddressApi extends BaseAPI {
    /**
     * 
     * @param {AddressDto} addressDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressApi
     */
    public addressControllerCreateOne(addressDto: AddressDto, options?: AxiosRequestConfig) {
        return AddressApiFp(this.configuration).addressControllerCreateOne(addressDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {any} id Deletes address based on id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressApi
     */
    public addressControllerDeleteOne(id: any, options?: AxiosRequestConfig) {
        return AddressApiFp(this.configuration).addressControllerDeleteOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressApi
     */
    public addressControllerFindByUser(options?: AxiosRequestConfig) {
        return AddressApiFp(this.configuration).addressControllerFindByUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {any} id Updates address based on id
     * @param {AddressDto} addressDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressApi
     */
    public addressControllerUpdateOne(id: any, addressDto: AddressDto, options?: AxiosRequestConfig) {
        return AddressApiFp(this.configuration).addressControllerUpdateOne(id, addressDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginUserDto} loginUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin: async (loginUserDto: LoginUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginUserDto' is not null or undefined
            assertParamExists('authControllerLogin', 'loginUserDto', loginUserDto)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterDto} registerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRegister: async (registerDto: RegisterDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerDto' is not null or undefined
            assertParamExists('authControllerRegister', 'registerDto', registerDto)
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LoginUserDto} loginUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogin(loginUserDto: LoginUserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogin(loginUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RegisterDto} registerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerRegister(registerDto: RegisterDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerRegister(registerDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * 
         * @param {LoginUserDto} loginUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin(loginUserDto: LoginUserDto, options?: any): AxiosPromise<AuthResponse> {
            return localVarFp.authControllerLogin(loginUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterDto} registerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRegister(registerDto: RegisterDto, options?: any): AxiosPromise<AuthResponse> {
            return localVarFp.authControllerRegister(registerDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * 
     * @param {LoginUserDto} loginUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authControllerLogin(loginUserDto: LoginUserDto, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authControllerLogin(loginUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterDto} registerDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authControllerRegister(registerDto: RegisterDto, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authControllerRegister(registerDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * JobItemsApi - axios parameter creator
 * @export
 */
export const JobItemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {JobItemsDto} jobItemsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobItemsControllerCreateOne: async (jobItemsDto: JobItemsDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobItemsDto' is not null or undefined
            assertParamExists('jobItemsControllerCreateOne', 'jobItemsDto', jobItemsDto)
            const localVarPath = `/job-items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobItemsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {any} id Deletes item based on id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobItemsControllerDeleteOne: async (id: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobItemsControllerDeleteOne', 'id', id)
            const localVarPath = `/job-items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {any} laundryJobId Gets items based on job id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobItemsControllerFindByJobId: async (laundryJobId: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'laundryJobId' is not null or undefined
            assertParamExists('jobItemsControllerFindByJobId', 'laundryJobId', laundryJobId)
            const localVarPath = `/job-items/{laundryJobId}`
                .replace(`{${"laundryJobId"}}`, encodeURIComponent(String(laundryJobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {any} id Updates item based on id
         * @param {JobItemsDto} jobItemsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobItemsControllerUpdateOne: async (id: any, jobItemsDto: JobItemsDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobItemsControllerUpdateOne', 'id', id)
            // verify required parameter 'jobItemsDto' is not null or undefined
            assertParamExists('jobItemsControllerUpdateOne', 'jobItemsDto', jobItemsDto)
            const localVarPath = `/job-items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobItemsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobItemsApi - functional programming interface
 * @export
 */
export const JobItemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobItemsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {JobItemsDto} jobItemsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobItemsControllerCreateOne(jobItemsDto: JobItemsDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobItemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobItemsControllerCreateOne(jobItemsDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {any} id Deletes item based on id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobItemsControllerDeleteOne(id: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobItemsControllerDeleteOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {any} laundryJobId Gets items based on job id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobItemsControllerFindByJobId(laundryJobId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<JobItemsResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobItemsControllerFindByJobId(laundryJobId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {any} id Updates item based on id
         * @param {JobItemsDto} jobItemsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobItemsControllerUpdateOne(id: any, jobItemsDto: JobItemsDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobItemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobItemsControllerUpdateOne(id, jobItemsDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JobItemsApi - factory interface
 * @export
 */
export const JobItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobItemsApiFp(configuration)
    return {
        /**
         * 
         * @param {JobItemsDto} jobItemsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobItemsControllerCreateOne(jobItemsDto: JobItemsDto, options?: any): AxiosPromise<JobItemsResponse> {
            return localVarFp.jobItemsControllerCreateOne(jobItemsDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {any} id Deletes item based on id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobItemsControllerDeleteOne(id: any, options?: any): AxiosPromise<void> {
            return localVarFp.jobItemsControllerDeleteOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {any} laundryJobId Gets items based on job id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobItemsControllerFindByJobId(laundryJobId: any, options?: any): AxiosPromise<Array<JobItemsResponse>> {
            return localVarFp.jobItemsControllerFindByJobId(laundryJobId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {any} id Updates item based on id
         * @param {JobItemsDto} jobItemsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobItemsControllerUpdateOne(id: any, jobItemsDto: JobItemsDto, options?: any): AxiosPromise<JobItemsResponse> {
            return localVarFp.jobItemsControllerUpdateOne(id, jobItemsDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JobItemsApi - object-oriented interface
 * @export
 * @class JobItemsApi
 * @extends {BaseAPI}
 */
export class JobItemsApi extends BaseAPI {
    /**
     * 
     * @param {JobItemsDto} jobItemsDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobItemsApi
     */
    public jobItemsControllerCreateOne(jobItemsDto: JobItemsDto, options?: AxiosRequestConfig) {
        return JobItemsApiFp(this.configuration).jobItemsControllerCreateOne(jobItemsDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {any} id Deletes item based on id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobItemsApi
     */
    public jobItemsControllerDeleteOne(id: any, options?: AxiosRequestConfig) {
        return JobItemsApiFp(this.configuration).jobItemsControllerDeleteOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {any} laundryJobId Gets items based on job id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobItemsApi
     */
    public jobItemsControllerFindByJobId(laundryJobId: any, options?: AxiosRequestConfig) {
        return JobItemsApiFp(this.configuration).jobItemsControllerFindByJobId(laundryJobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {any} id Updates item based on id
     * @param {JobItemsDto} jobItemsDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobItemsApi
     */
    public jobItemsControllerUpdateOne(id: any, jobItemsDto: JobItemsDto, options?: AxiosRequestConfig) {
        return JobItemsApiFp(this.configuration).jobItemsControllerUpdateOne(id, jobItemsDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LaundryJobApi - axios parameter creator
 * @export
 */
export const LaundryJobApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LaundryJobDto} laundryJobDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        laundryJobControllerCreateOne: async (laundryJobDto: LaundryJobDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'laundryJobDto' is not null or undefined
            assertParamExists('laundryJobControllerCreateOne', 'laundryJobDto', laundryJobDto)
            const localVarPath = `/laundry-job`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(laundryJobDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        laundryJobControllerFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/laundry-job`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {any} id Gets laundry-job based on user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        laundryJobControllerFindByUser: async (id: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('laundryJobControllerFindByUser', 'id', id)
            const localVarPath = `/laundry-job/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {any} id Gets laundry-job based on id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        laundryJobControllerFindOne: async (id: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('laundryJobControllerFindOne', 'id', id)
            const localVarPath = `/laundry-job/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {any} id Updates laundry-job based on id
         * @param {LaundryJobDto} laundryJobDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        laundryJobControllerUpdateOne: async (id: any, laundryJobDto: LaundryJobDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('laundryJobControllerUpdateOne', 'id', id)
            // verify required parameter 'laundryJobDto' is not null or undefined
            assertParamExists('laundryJobControllerUpdateOne', 'laundryJobDto', laundryJobDto)
            const localVarPath = `/laundry-job/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(laundryJobDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LaundryJobApi - functional programming interface
 * @export
 */
export const LaundryJobApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LaundryJobApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LaundryJobDto} laundryJobDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async laundryJobControllerCreateOne(laundryJobDto: LaundryJobDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LaundryJobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.laundryJobControllerCreateOne(laundryJobDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async laundryJobControllerFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LaundryJobResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.laundryJobControllerFindAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {any} id Gets laundry-job based on user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async laundryJobControllerFindByUser(id: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LaundryJobResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.laundryJobControllerFindByUser(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {any} id Gets laundry-job based on id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async laundryJobControllerFindOne(id: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LaundryJobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.laundryJobControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {any} id Updates laundry-job based on id
         * @param {LaundryJobDto} laundryJobDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async laundryJobControllerUpdateOne(id: any, laundryJobDto: LaundryJobDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LaundryJobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.laundryJobControllerUpdateOne(id, laundryJobDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LaundryJobApi - factory interface
 * @export
 */
export const LaundryJobApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LaundryJobApiFp(configuration)
    return {
        /**
         * 
         * @param {LaundryJobDto} laundryJobDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        laundryJobControllerCreateOne(laundryJobDto: LaundryJobDto, options?: any): AxiosPromise<LaundryJobResponse> {
            return localVarFp.laundryJobControllerCreateOne(laundryJobDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        laundryJobControllerFindAll(options?: any): AxiosPromise<Array<LaundryJobResponse>> {
            return localVarFp.laundryJobControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {any} id Gets laundry-job based on user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        laundryJobControllerFindByUser(id: any, options?: any): AxiosPromise<Array<LaundryJobResponse>> {
            return localVarFp.laundryJobControllerFindByUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {any} id Gets laundry-job based on id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        laundryJobControllerFindOne(id: any, options?: any): AxiosPromise<LaundryJobResponse> {
            return localVarFp.laundryJobControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {any} id Updates laundry-job based on id
         * @param {LaundryJobDto} laundryJobDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        laundryJobControllerUpdateOne(id: any, laundryJobDto: LaundryJobDto, options?: any): AxiosPromise<LaundryJobResponse> {
            return localVarFp.laundryJobControllerUpdateOne(id, laundryJobDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LaundryJobApi - object-oriented interface
 * @export
 * @class LaundryJobApi
 * @extends {BaseAPI}
 */
export class LaundryJobApi extends BaseAPI {
    /**
     * 
     * @param {LaundryJobDto} laundryJobDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaundryJobApi
     */
    public laundryJobControllerCreateOne(laundryJobDto: LaundryJobDto, options?: AxiosRequestConfig) {
        return LaundryJobApiFp(this.configuration).laundryJobControllerCreateOne(laundryJobDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaundryJobApi
     */
    public laundryJobControllerFindAll(options?: AxiosRequestConfig) {
        return LaundryJobApiFp(this.configuration).laundryJobControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {any} id Gets laundry-job based on user id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaundryJobApi
     */
    public laundryJobControllerFindByUser(id: any, options?: AxiosRequestConfig) {
        return LaundryJobApiFp(this.configuration).laundryJobControllerFindByUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {any} id Gets laundry-job based on id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaundryJobApi
     */
    public laundryJobControllerFindOne(id: any, options?: AxiosRequestConfig) {
        return LaundryJobApiFp(this.configuration).laundryJobControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {any} id Updates laundry-job based on id
     * @param {LaundryJobDto} laundryJobDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LaundryJobApi
     */
    public laundryJobControllerUpdateOne(id: any, laundryJobDto: LaundryJobDto, options?: AxiosRequestConfig) {
        return LaundryJobApiFp(this.configuration).laundryJobControllerUpdateOne(id, laundryJobDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MenuApi - axios parameter creator
 * @export
 */
export const MenuApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {MenuDto} menuDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuControllerCreateOne: async (menuDto: MenuDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'menuDto' is not null or undefined
            assertParamExists('menuControllerCreateOne', 'menuDto', menuDto)
            const localVarPath = `/menu`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(menuDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuControllerFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/menu`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {any} id Gets menu based on id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuControllerFindOne: async (id: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('menuControllerFindOne', 'id', id)
            const localVarPath = `/menu/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {any} id Updates menu based on id
         * @param {MenuDto} menuDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuControllerUpdateOne: async (id: any, menuDto: MenuDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('menuControllerUpdateOne', 'id', id)
            // verify required parameter 'menuDto' is not null or undefined
            assertParamExists('menuControllerUpdateOne', 'menuDto', menuDto)
            const localVarPath = `/menu/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(menuDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MenuApi - functional programming interface
 * @export
 */
export const MenuApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MenuApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {MenuDto} menuDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuControllerCreateOne(menuDto: MenuDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MenuResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuControllerCreateOne(menuDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuControllerFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MenuResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuControllerFindAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {any} id Gets menu based on id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuControllerFindOne(id: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MenuResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {any} id Updates menu based on id
         * @param {MenuDto} menuDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuControllerUpdateOne(id: any, menuDto: MenuDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MenuResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuControllerUpdateOne(id, menuDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MenuApi - factory interface
 * @export
 */
export const MenuApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MenuApiFp(configuration)
    return {
        /**
         * 
         * @param {MenuDto} menuDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuControllerCreateOne(menuDto: MenuDto, options?: any): AxiosPromise<MenuResponse> {
            return localVarFp.menuControllerCreateOne(menuDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuControllerFindAll(options?: any): AxiosPromise<Array<MenuResponse>> {
            return localVarFp.menuControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {any} id Gets menu based on id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuControllerFindOne(id: any, options?: any): AxiosPromise<MenuResponse> {
            return localVarFp.menuControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {any} id Updates menu based on id
         * @param {MenuDto} menuDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuControllerUpdateOne(id: any, menuDto: MenuDto, options?: any): AxiosPromise<MenuResponse> {
            return localVarFp.menuControllerUpdateOne(id, menuDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MenuApi - object-oriented interface
 * @export
 * @class MenuApi
 * @extends {BaseAPI}
 */
export class MenuApi extends BaseAPI {
    /**
     * 
     * @param {MenuDto} menuDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public menuControllerCreateOne(menuDto: MenuDto, options?: AxiosRequestConfig) {
        return MenuApiFp(this.configuration).menuControllerCreateOne(menuDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public menuControllerFindAll(options?: AxiosRequestConfig) {
        return MenuApiFp(this.configuration).menuControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {any} id Gets menu based on id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public menuControllerFindOne(id: any, options?: AxiosRequestConfig) {
        return MenuApiFp(this.configuration).menuControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {any} id Updates menu based on id
     * @param {MenuDto} menuDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public menuControllerUpdateOne(id: any, menuDto: MenuDto, options?: AxiosRequestConfig) {
        return MenuApiFp(this.configuration).menuControllerUpdateOne(id, menuDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerFindMyLaundryJob: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/me/laundry`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerFindOne: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/me/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerFindMyLaundryJob(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LaundryJobResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerFindMyLaundryJob(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerFindOne(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerFindOne(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerFindMyLaundryJob(options?: any): AxiosPromise<Array<LaundryJobResponse>> {
            return localVarFp.userControllerFindMyLaundryJob(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerFindOne(options?: any): AxiosPromise<UserResponse> {
            return localVarFp.userControllerFindOne(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerFindMyLaundryJob(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerFindMyLaundryJob(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerFindOne(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerFindOne(options).then((request) => request(this.axios, this.basePath));
    }
}


